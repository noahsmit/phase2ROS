@{
import em, StringIO, os
def expand_snippet(filename, data=locals()):
    output = StringIO.StringIO()
    interpreter = em.Interpreter(output=output)
    interpreter.include(os.path.join(world_dir, 'snippet', filename), data)
    print output.getvalue()
}@
<?xml version="1.0" ?>
<sdf version="1.5">
  <world name="default">
    <!-- Set the initial camera pose to be looking at the workspace. -->
    <gui fullscreen='0'>
      <camera name='user_camera'>
        <!-- pretty overview shot -->
        <pose frame=''>-7.56272 4.06148 6.60308 0 0.636 -0.467992</pose>

        <!-- Top down part placement
        <pose frame=''>-0.475239 0 4.863623 0 1.570796 0</pose> -->

        <!-- Shipment placement AGV 1
        <pose frame=''>0.301627 3.242337 2.584521 0 1.570796</pose> -->

        <!-- Shipment placement AGV 2
        <pose frame=''>0.301627 -3.242337 2.584521 0 1.570796</pose> -->

        <view_controller>orbit</view_controller>
        <projection_type>perspective</projection_type>
      </camera>
    </gui>

@[if options['unthrottled_physics_update']]@
    <physics type="ode">
      <real_time_update_rate>0</real_time_update_rate>
    </physics>
@[end if]@

@[if not options['disable_shadows']]@
    <!-- Disable shadows. -->
    <scene>
      <shadows>false</shadows>
    </scene>
@[end if]@

@[if drops and options['visualize_drop_regions']]@
@[  for drop_region in drops['drop_regions']]@
@[    if drop_region.frame == "world"]@
    <model name="@(drop_region.name)">
        <pose>@(' '.join([str((float(drop_region.min[i]) + float(drop_region.max[i])) * 0.5) for i in range(3)])) 0 0 0</pose>
        <static>true</static>
        <link name="link">
          <visual name="visual">
            <geometry>
            <box>
              <size>@(' '.join([str(float(drop_region.max[i]) - float(drop_region.min[i])) for i in range(3)]))</size>
            </box>
            </geometry>
          </visual>
        </link>
     </model>
@[    end if]@
@[  end for]@
@[end if]@


    <!-- A global light source -->
    <light type="directional" name="sun">
      <cast_shadows>true</cast_shadows>
      <pose>0 0 10 0 0 0</pose>
      <diffuse>0.8 0.8 0.8 1</diffuse>
      <specular>0.2 0.2 0.2 1</specular>
      <attenuation>
        <range>1000</range>
        <constant>0.9</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <direction>-0.5 0.1 -0.9</direction>
    </light>

    <!-- A directed light source -->
    <light name="camera_spot_light" type='spot'>
      <pose>14 -3.0 3.0 -1.55 0.0 -1.62</pose>
      <diffuse>0.5 0.5 0.5 1</diffuse>
      <specular>0.1 0.1 0.1 1</specular>
      <direction>0 0 -1</direction>
      <attenuation>
        <range>50</range>
        <constant>0.5</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <cast_shadows>0</cast_shadows>
      <spot>
        <inner_angle>0.6</inner_angle>
        <outer_angle>1</outer_angle>
        <falloff>1</falloff>
      </spot>
    </light>

    <!-- the workcell -->
    <include>
      <uri>model://workcell</uri>
      <pose>0 0 0 0 0 1.57</pose>
    </include>

@[for bin_name, bin_pose in bins.items()]@
    <include>
      <name>@(bin_name)</name>
      <uri>model://workcell_bin</uri>
      <pose>@(' '.join(bin_pose.xyz)) @(' '.join(bin_pose.rpy))</pose>
    </include>
@[end for]@

@[for name, sensor in sensors.items()]@
@[if sensor.type == "quality_control"]@
    <!-- a quality control sensor called @(name) -->
@{
expand_snippet('quality_control_sensor.sdf.template')
}@
@[end if]@

@[if sensor.type == "break_beam"]@
    <!-- a break beam sensor called @(name) -->
@{
expand_snippet('break_beam.sdf.template')
}@
@[end if]@

@[if sensor.type == "proximity_sensor"]@
    <!-- a proximity sensor called @(name) -->
@{
expand_snippet('proximity_sensor.sdf.template')
}@

@[end if]@
@[if sensor.type == "logical_camera"]@
    <!-- a logical camera called @(name) -->
@{
expand_snippet('logical_camera.sdf.template')
}@

@[end if]@
@[if sensor.type == "depth_camera"]@
    <!-- a laser profiler called @(name) -->
@{
expand_snippet('depth_camera.sdf.template')
}@
@[end if]@
@[if sensor.type == "laser_profiler"]@
    <!-- a laser profiler called @(name) -->
@{
expand_snippet('laser_profiler.sdf.template')
}@
@[end if]@
@[end for]@

    <!-- a wall to delete objects at the end of the belt -->
    <include>
      <uri>model://deletion_wall</uri>
      <pose>1.2 -4.1 1.41 0 0 1.5708</pose>
    </include>

@{belt_models_loop = True}@
@{belt_population_cycles = options['belt_population_cycles'] if belt_models_loop else 1}

@{obj_type_index = 0}@
@[for obj_type, spawn_times in belt_models.items()]@
    <!-- Pool of @(obj_type) objects -->
@[  for index in range(belt_population_cycles * len(spawn_times))]@
    <include>
      <uri>model://@(obj_type)_ariac</uri>
      <name>@(obj_type)_@(index)</name>
      <pose>@(7.5 + 0.25 * obj_type_index) @(-9.8 + 0.25 * index) -5.0 0 0 0</pose>
    </include>
@[  end for]@
@{obj_type_index += 1}@
@[end for]@

    <!-- an invisible conveyor belt -->
      <include>
        <name>conveyor_belt</name>
        <pose>0.07 0.8 0.464 0 0 0</pose>
        <uri>model://conveyor_belt_tall_ariac</uri>
      </include>

@[if options['insert_models_over_bins']]@
    <!-- Populate the bins -->
@[for model_name, model in models_to_insert.items()]@
    <include>
      <name>@(model_name)</name>
      <uri>model://@(model.type)_ariac</uri>
      <pose>@(' '.join(model.pose.xyz)) @(' '.join(model.pose.rpy))</pose>
    </include>
@[end for]@
@[end if]@
@[if belt_models]@

    <!-- Populate the conveyor belt -->
    <plugin filename="libROSPopulationPlugin.so" name="populate_conveyor">
      <activation_topic>/ariac/populate_belt</activation_topic>
      <rate_modifier_topic>/ariac/population/rate_modifier</rate_modifier_topic>
      <control_topic>/ariac/population/control</control_topic>
      <state_topic>/ariac/population/state</state_topic>
      <start_index>0</start_index>
      <prefix_object_names>false</prefix_object_names>
      <loop_forever>@("true" if belt_models_loop else "false")</loop_forever>
      <frame>conveyor_belt::conveyor_belt_fixed</frame>
      <object_sequence>
@[for product_name, spawn_times in belt_models.items()]@
  @[for spawn_time, product in spawn_times.items()]@
        <object>
          <time>@(spawn_time)</time>
          <type>@(product.type)</type>
          <pose>@(' '.join(product.pose.xyz)) @(' '.join(product.pose.rpy))</pose>
        </object>
  @[end for]@
@[end for]@
      </object_sequence>
      <update_rate>10</update_rate>
    </plugin>
@[end if]@

@[if options['insert_agvs']]@
@[for agv_id in [1,2]]@
    <!-- AGV@(str(agv_id)) -->
    <model name="agv@(str(agv_id))">
      <pose>0.3 @(3.3 if agv_id == 1 else -3.3) 0 0 0 @(3.14159 if agv_id == 1 else 0)</pose>
      <include>
        <name>agv@(str(agv_id))</name>
        <uri>model://warehouse_robot_ariac</uri>
      </include>
      <plugin name="agv_plugin" filename="libROSAGVPlugin.so">
        <agv_control_service_name>/ariac/agv@(str(agv_id))/animate</agv_control_service_name>
        <clear_tray_service_name>/ariac/kit_tray_@(str(agv_id))/clear_tray</clear_tray_service_name>
        <lock_tray_service_name>/ariac/kit_tray_@(str(agv_id))/lock_models</lock_tray_service_name>
        <index>@(str(agv_id))</index>
      </plugin>

      <!-- a tray for building kits -->
      <!-- (this has to be in a model tag so logical cameras can detect it as a nested model) -->
      <model name="kit_tray_@(str(agv_id))">
        <pose>0.0 0.15 0.75 0 0 0</pose>
        <include>
          <name>kit_tray_@(str(agv_id))</name>
          <uri>model://kit_tray_ariac</uri>
        </include>
        <plugin name="kit_tray_plugin" filename="libROSAriacKitTrayPlugin.so">
          <contact_sensor_name>kit_tray_contact</contact_sensor_name>
          <tf_frame_name>kit_tray_@(str(agv_id))</tf_frame_name>
          <clear_tray_service_name>/ariac/kit_tray_@(str(agv_id))/clear_tray</clear_tray_service_name>
          <lock_models_service_name>/ariac/kit_tray_@(str(agv_id))/lock_models</lock_models_service_name>
          <get_content_service_name>/ariac/kit_tray_@(str(agv_id))/get_content</get_content_service_name>
          <update_rate>20</update_rate>
          <faulty_parts>
@[for part_name, part_info in faulty_products.items()]@
            <name>@(part_name)</name>
@[end for]@
          </faulty_parts>
        </plugin>
      </model>

      <!-- join the tray and agv -->
      <joint name="agv_tray" type="fixed">
          <parent>agv@(str(agv_id))::link</parent>
          <child>kit_tray_@(str(agv_id))::kit_tray_@(str(agv_id))::tray</child>
      </joint>
    </model>

    <model name="quality_control_sensor_@(str(agv_id))">
      <pose>0.3 @(3.5 if agv_id == 1 else -3.5) 1.5 0 1.574 @(-1.574 if agv_id == 1 else 1.574)</pose>
      <plugin name="ros_logical_camera" filename="libROSLogicalCameraPlugin.so">
        <robotNamespace>ariac</robotNamespace>
        <position_noise>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.001</stddev>
          </noise>
        </position_noise>
        <orientation_noise>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </orientation_noise>
        <known_model_names>
@[for part_name, part_info in faulty_products.items()]@
          <name>@(part_name)</name>
@[end for]@
        </known_model_names>
      </plugin>
      <link name="link">
        <gravity>false</gravity>
        <inertial>
          <mass>0.1</mass>
          <inertia>
            <ixx>0.000166667</ixx>
            <iyy>0.000166667</iyy>
            <izz>0.000166667</izz>
          </inertia>
        </inertial>

        <collision name="collision">
          <pose>0 0.02 0 0 0 -1.5708</pose>
          <geometry>
            <mesh>
              <uri>model://logical_camera/meshes/camera.dae</uri>
            </mesh>
          </geometry>
        </collision>

        <visual name="visual">
          <pose>0 0.02 0 0 0 -1.5708</pose>
          <geometry>
            <mesh>
              <uri>model://logical_camera/meshes/camera.dae</uri>
            </mesh>
          </geometry>
        </visual>

        <sensor name="logical_camera" type="logical_camera">
          <logical_camera>
            <near>0.73</near>
            <far>0.78</far>
            <horizontal_fov>0.7</horizontal_fov>
            <aspect_ratio>0.35</aspect_ratio>
          </logical_camera>

          <visualize>false</visualize>
          <always_on>true</always_on>
          <update_rate>10</update_rate>
        </sensor>
      </link>
    </model>

@[end for]@
@[end if]@


    <!-- The NIST-ARIAC task manager -->
    <plugin filename="libROSAriacTaskManagerPlugin.so" name="task_manager">
      <robot_namespace>ariac</robot_namespace>
      <competition_time_limit>@(time_limit)</competition_time_limit>
      <start_competition_service_name>/ariac/start_competition</start_competition_service_name>
      <end_competition_service_name>/ariac/end_competition</end_competition_service_name>
      <population_activate_topic>/ariac/populate_belt</population_activate_topic>
      <conveyor_control_service>/ariac/conveyor/control</conveyor_control_service>
      <submit_tray_service_name>/ariac/submit_shipment</submit_tray_service_name>
      <material_locations_service_name>/ariac/material_locations</material_locations_service_name>
      <shipment_content_topic_name>/ariac/trays</shipment_content_topic_name>
      <orders_topic>/ariac/orders</orders_topic>
@[for agv_id in [1,2]]@
      <agv index="@(agv_id)">
        <agv_control_service_name>/ariac/agv@(agv_id)</agv_control_service_name>
        <agv_animate_service_name>/ariac/agv@(agv_id)/animate</agv_animate_service_name>
        <get_content_service_name>/ariac/kit_tray_@(agv_id)/get_content</get_content_service_name>
      </agv>
@[end for]@
@[for order_name, order in orders.items()]@
      <order>
        <name>@(order_name)</name>
@[if order['announcement_condition'] == 'time']@
        <start_time>@(order['announcement_condition_value'])</start_time>
@[end if]@
@[if order['announcement_condition'] == 'wanted_products']@
        <interrupt_on_wanted_products>@(order['announcement_condition_value'])</interrupt_on_wanted_products>
@[end if]@
@[if order['announcement_condition'] == 'unwanted_products']@
        <interrupt_on_unwanted_products>@(order['announcement_condition_value'])</interrupt_on_unwanted_products>
@[end if]@
@[for shipment_index in range(order['shipment_count'])]
@{
if '_update' in order_name:
    order_name = order_name.split('_update')[0]
destination = order['destinations'][shipment_index]
}@
        <shipment>
          <shipment_type>@(order_name)_shipment_@(shipment_index)</shipment_type>
          <destination>@(destination)</destination>
@[for product in order['products']]@
          <product>
            <type>@(product.type)</type>
            <pose>@(' '.join(product.pose.xyz)) @(' '.join(product.pose.rpy))</pose>
          </product>
@[end for]@
        </shipment>
@[end for]@
      </order>
@[end for]@
      <material_locations>
@[for material_name, locations in material_locations.items()]@
        <material>
          <type>@(material_name)</type>
@[for location in locations]@
          <location>
            <storage_unit>@(location)</storage_unit>
          </location>
@[end for]@
        </material>
@[end for]@
      </material_locations>
@[if sensor_blackout]@
      <sensor_blackout>
        <duration>@(sensor_blackout['duration'])</duration>
        <product_count>@(sensor_blackout['product_count'])</product_count>
        <topic>/ariac/sensor_enable</topic>
      </sensor_blackout>
@[end if]@
      <update_rate>10</update_rate>

    </plugin>

    <!-- Plane under the workcell on which 'removed' models can be placed -->
    <model name="under_workcell_plane">
      <pose>0 0 -5.1 0 0 0</pose>
      <static>true</static>
      <link name="link">
        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>25 25</size>
            </plane>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>100</mu>
                <mu2>50</mu2>
              </ode>
            </friction>
          </surface>
        </collision>
      </link>
    </model>

    <!-- A ground plane to hide the under_workcell_plane -->
    <model name="ground_plane">
      <static>true</static>
      <pose>-50 50 -0.01 0 0 0</pose>
      <link name="link">
        <visual name="visual">
          <cast_shadows>false</cast_shadows>
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>150 150</size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grey</name>
            </script>
          </material>
        </visual>
      </link>
    </model>

    <!-- A visual and collision of the linear rail the robots ride on -->
    <model name="linear_rail">
      <pose>0.3 0 0.9 0 0 0</pose>
      <static>true</static>
      <link name="rail_link">
        <visual name="rail_link_visual">
          <geometry>
            <box>
              <size>0.2 4.6 0.1</size>
            </box>
          </geometry>
          <material>
            <script>Gazebo/Grey</script>
          </material>
        </visual>

        <collision name="rail_link_collision">
          <geometry>
            <box>
              <size>0.2 4.6 0.1</size>
            </box>
          </geometry>
        </collision>
      </link>
    </model>

  </world>
</sdf>
